#!/bin/bash

# $Id$

set +e

# VT100 colors
declare -r  BLACK=$'\e[1;30m'
declare -r  DK_GRAY=$'\e[0;30m'

declare -r  RED=$'\e[31m'
declare -r  GREEN=$'\e[32m'
declare -r  YELLOW=$'\e[33m'
declare -r  BLUE=$'\e[34m'
declare -r  MAGENTA=$'\e[35m'
declare -r  CYAN=$'\e[36m'
declare -r  WHITE=$'\e[37m'

declare -r  OFF=$'\e[0m'
declare -r  BOLD=$'\e[1m'
declare -r  REVERSE=$'\e[7m'
declare -r  HIDDEN=$'\e[8m'

declare -r  tab_=$'\t'
declare -r  nl_=$'\n'

declare -r   DD_BORDER="${BOLD}${WHITE}==============================================================================${OFF}"
declare -r   SD_BORDER="${BOLD}${WHITE}------------------------------------------------------------------------------${OFF}"
declare -r STAR_BORDER="${BOLD}${WHITE}******************************************************************************${OFF}"

# bold yellow > <  pair
declare -r R_arrow=$'\e[1;33m>\e[0m'
declare -r L_arrow=$'\e[1;33m<\e[0m'


usage() {
cat <<- -EOF-
${DD_BORDER}
${BOLD}
 Usage: $0 ${BOLD}[OPTION]

Options:
${BOLD}  -h, --help${OFF}
        print this help, then exit

${BOLD}  -V, --version${OFF}
        print version information, then exit

${BOLD}  -B, --book VER${OFF}
        checkout VER version of the book. Supported versions at this time are:
        dev* | trunk | SVN     aliases for Development {C,H,B}LFS

${BOLD}  -D  --directory DIR${OFF}
        use DIR directory for building ${BOLD}$(echo $PROGNAME | tr [a-z] [A-Z])${OFF}; all files jhalfs produces
        will be in the directory DIR/jhalfs.

${BOLD}  -G, --get-packages${OFF}
        download the packages and patches. This assumes that the server declared
        in the configuration file has the proper packages and patches for the
        book version being processed.

${BOLD}  -T, --testsuites N ${OFF}
        Run test suites  [0-3]
          0 = none
          1 = only chapter06 Glibc, GCC and Binutils testsuites
          2 = all chapter06 testsuites (in BLFS, alias to 1)
          3 = all chapter05 and chapter06 testsuites
        In BLFS, 2 and 3 are aliases to 1
        In CLFS, 3 is an alias to 2

${BOLD}  -W, --working-copy DIR${OFF}
        use the local working copy placed in DIR as the $(echo $PROGNAME | tr [a-z] [A-Z]) book
-EOF-

[[ ${PROGNAME} != "blfs" ]] &&
cat <<- -EOF-

${BOLD}  -C, --comparasion TYPE${OFF}
         do iterative comparison analysis. That will take several time due that
         the final system packages wil be rebuilded the times defined in the
         ITERATIONS config option.
         Analisys types allowed are:
           ICA   = do the ICA analysis designed by Greg Schafer
           farce = do the farce analysis designed by Ken Moffat
           both  = perfom both ICA and farce analysis

${BOLD}  -F, --fstab FILE${OFF}
        use FILE as the /etc/fstab file for the ${BOLD}$(echo $PROGNAME | tr [a-z] [A-Z])${OFF} system. If not specified,
        a default /etc/fstab file with dummy values is created.

${BOLD}  -K, --kernel-config FILE${OFF}
        use the kernel configuration file specified in FILE to build the kernel.
        if the file is not found, or if not specified, the kernel build is skipped.

${BOLD}  -M, --run-make${OFF}
        run make on the generated Makefile

${BOLD}  -R --rebuild${OFF}
        clean the build directory before to perfom any other task. The directory
        is cleaned only if it was populated by a previous jhalfs run.
-EOF-

[[ ${PROGNAME} = "clfs" ]] &&
cat <<- -EOF-

${BOLD}  -A, --arch ARCH ${OFF}
        Select the TARGET architecture, valid selections are:
           32bit builds
        x86, i486, i586, ppc, mips, mipsel, sparc
           64bit builds
        x86_64-64, mips64-64, mipsel64-64, sparc64-64, alpha
           64bit multi-lib
        x86_64, mips64, mipsel64, sparc64, ppc64

${BOLD}  --boot-config FILE ${OFF}
        The configuration file for the bootstrap kernel if method=boot

${BOLD}  --method BUILDMETHOD ${OFF}
        Select the build method, chroot or boot
-EOF-

[[ ${PROGNAME} = "hlfs" ]] &&
cat <<- -EOF-

${BOLD}  --model STYLE ${OFF}
        Select the library model for the HLFS system
        Valid choices are: glibc or uclibc
-EOF-

[[ ${PROGNAME} = "blfs" ]] &&
cat <<- -EOF-

${BOLD}  --dependencies  0/1/2${OFF}
        add dependencies of type TYPE to the build tree.
        If not set, both required and recommended are used.

                  Possible values are:
        0 - required        only required dependecies are used
        1 - recommended     both required a recommended dependencies are used
        2 - optional        all dependencies are used
-EOF-

cat <<- -EOF-
${DD_BORDER}
-EOF-
  exit
}

version="
${BOLD}  \"jhalfs\"${OFF} builder tool (development) \$Rev$
\$Date$

${BOLD}              \"${PROGNAME}\"${OFF} script module

Written by George Boudreau,
           Manuel Canales Esparcia,
           Jeremy Huntwork

This program is published under the ${BOLD}Gnu General Public License, Version 2.${OFF}
"


no_empty_builddir() {
  'clear'
cat <<- -EOF-
${DD_BORDER}

${tab_}${tab_}${BOLD}${RED}W A R N I N G${OFF}
    Looks like the \$BUILDDIR directory contains subdirectories
    from a previous HLFS build.

    Please format the partition mounted on \$BUILDDIR or set
    a different build directory before running jhalfs.
${OFF}
${DD_BORDER}
-EOF-
  exit
}


help="${nl_}Try '$0 --help' for more information."


exit_missing_arg="\
echo \"Option '\$1' requires an argument\" >&2
echo \"\$help\" >&2
exit 1"

no_dl_client="\
echo \"Could not find a way to download the ${BOLD}$(echo $PROGNAME | tr [a-z] [A-Z])${OFF} sources.\" >&2
echo \"Attempting to continue.\" >&2"

HEADER="# This file is automatically generated by jhalfs
# DO NOT EDIT THIS FILE MANUALLY
#
# Generated on `date \"+%F %X %Z\"`"





#----------------------------------#
wrt_target() {                     # Create target and initialize log file
#----------------------------------#
  local i=$1
  local PREV=$2
(
cat << EOF

$i:  $PREV
	@\$(call echo_message, Building)
	@echo -e "\n\`date\`\n\nKB: \`du -skx --exclude=jhalfs \$(MOUNT_PT)\`\n" >logs/$this_script
EOF
) >> $MKFILE.tmp
}


#----------------------------------#
wrt_unpack() {                     # Unpack and set 'ROOT' var
#----------------------------------#
  local FILE=$1
(
cat << EOF
	@\$(call unpack,$FILE)
	@ROOT=\`head -n1 /tmp/unpacked | sed 's@^./@@;s@/.*@@'\` && \\
	echo "export PKGDIR=\$(MOUNT_PT)\$(SRC)/\$\$ROOT" > envars && \\
	chown -R lfs \$(MOUNT_PT)\$(SRC)/\$\$ROOT
EOF
) >> $MKFILE.tmp
}


#----------------------------------#
wrt_unpack2() {                    #
#----------------------------------#
  local FILE=$1
(
cat  << EOF
	@\$(call unpack2,$FILE)
	@ROOT=\`head -n1 /tmp/unpacked | sed 's@^./@@;s@/.*@@'\` && \\
	echo "export PKGDIR=\$(SRC)/\$\$ROOT" > envars
EOF
) >> $MKFILE.tmp
}


#=============================#
wrt_unpack3() {               #
#=============================#
  local FILE=$1
(
cat  << EOF
	@\$(call unpack3,$FILE)
	@ROOT=\`head -n1 /tmp/unpacked | sed 's@^./@@;s@/.*@@'\` && \\
	echo "export PKGDIR=\$(SRC)/\$\$ROOT" > envars
EOF
) >> $MKFILE.tmp
}



#----------------------------------#
wrt_target_vars() {                # Target vars for hlfs (cross-build method)
#----------------------------------#
(
cat  << EOF
	@echo "export target=$(uname -m)-${TARGET}" >> envars && \\
	echo "export ldso=/lib/${LOADER}" >> envars
EOF
) >> $MKFILE.tmp

}


#----------------------------------#
wrt_run_as_su() {                  # Execute script inside time { }, footer to log file
#----------------------------------#
  local this_script=$1
  local file=$2
(
cat << EOF
	@( time { su - lfs -c "source /home/lfs/.bashrc && $JHALFSDIR/${PROGNAME}-commands/$file" >>logs/$this_script 2>&1 ; } ) 2>>logs/$this_script && \\
	echo -e "\nKB: \`du -skx --exclude=jhalfs \$(MOUNT_PT)\`\n" >>logs/$this_script
EOF
) >> $MKFILE.tmp
}


#----------------------------------#
wrt_run_as_root() {                # Some scripts must be run as root..
#----------------------------------#
  local this_script=$1
  local file=$2
(
cat << EOF
	@( time { export LFS=\$(MOUNT_PT) && ${PROGNAME}-commands/$file >>logs/$this_script 2>&1 ; } ) 2>>logs/$this_script && \\
	echo -e "\nKB: \`du -skx --exclude=jhalfs \$(MOUNT_PT)\`\n" >>logs/$this_script
EOF
) >> $MKFILE.tmp
}


#=============================#
wrt_run_as_root2() {          #
#=============================#
  local this_script=$1
  local file=$2
(
cat << EOF
	@( time { source envars && ${PROGNAME}-commands/$file >>logs/$this_script 2>&1 ; } ) 2>>logs/$this_script && \\
	echo -e "\nKB: \`du -skx --exclude=jhalfs \`\n" >>logs/$this_script
EOF
) >> $MKFILE.tmp
}



#----------------------------------#
wrt_run_as_chroot1() {             #
#----------------------------------#
  local this_script=$1
  local file=$2
(
    cat << EOF
	@( time { \$(CHROOT1) 'cd /jhalfs && source envars && /jhalfs/${PROGNAME}-commands/$file >>/jhalfs/logs/${this_script} 2>&1' ; } ) 2>>logs/$this_script && \\
	echo -e "\nKB: \`du -skx --exclude=jhalfs \$(MOUNT_PT)\`\n" >>logs/${this_script}
EOF
) >> $MKFILE.tmp
}


#----------------------------------#
wrt_run_as_chroot2() {             #
#----------------------------------#
  local this_script=$1
  local file=$2
(
cat << EOF
	@( time { \$(CHROOT2) 'cd /jhalfs && source envars && /jhalfs/${PROGNAME}-commands/$file >>/jhalfs/logs/${this_script} 2>&1' ; } ) 2>>logs/$this_script && \\
	echo -e "\nKB: \`du -skx --exclude=jhalfs \$(MOUNT_PT)\`\n" >>logs/${this_script}
EOF
) >> $MKFILE.tmp
}


#----------------------------------#
wrt_copy_fstab() {                 #
#----------------------------------#
  local i=$1
(
    cat << EOF
	@cp -v $FSTAB \$(MOUNT_PT)/etc/fstab >>logs/$i 2>&1
EOF
) >> $MKFILE.tmp
}

#----------------------------------#
wrt_copy_fstab2() {                #
#----------------------------------#
  local i=$1
(
    cat << EOF
	@cp -v /sources/fstab /etc/fstab >>logs/$i 2>&1
EOF
) >> $MKFILE.tmp
}


#----------------------------------#
wrt_remove_build_dirs() {          #
#----------------------------------#
  local name=$1
(
cat << EOF
	@ROOT=\`head -n1 /tmp/unpacked | sed 's@^./@@;s@/.*@@'\` && \\
	rm -r \$(MOUNT_PT)\$(SRC)/\$\$ROOT && \\
	if [ -e \$(MOUNT_PT)\$(SRC)/$name-build ]; then \\
		rm -r \$(MOUNT_PT)\$(SRC)/$name-build; \\
	fi;
EOF
) >> $MKFILE.tmp
}


#----------------------------------#
wrt_remove_build_dirs2() {         #
#----------------------------------#
  local name=$1
(
cat << EOF
	@ROOT=\`head -n1 /tmp/unpacked | sed 's@^./@@;s@/.*@@'\` && \\
	rm -r \$(SRC)/\$\$ROOT && \\
	if [ -e \$(SRC)/$name-build ]; then \\
		rm -r \$(SRC)/$name-build; \\
	fi;
EOF
) >> $MKFILE.tmp
}


#----------------------------------#
wrt_report() {         #
#----------------------------------#
(
cat << EOF

create-sbu_du-report:  $PREV
	@\$(call echo_message, Building)
	@./create-sbu_du-report.sh logs $VERSION
	@\$(call echo_report,$VERSION-SBU_DU-$(date --iso-8601).report)
	@touch  \$@
EOF
) >> $MKFILE.tmp

chapter789="$chapter789 create-sbu_du-report"
}


#----------------------------#
run_make() {
#----------------------------#
  # Test if make must be run.
  if [ "$RUNMAKE" = "1" ] ; then
    # Test to make sure we're running the build as root
    if [ "$UID" != "0" ] ; then
      echo "You must be logged in as root to successfully build the system."
      exit 1
    fi
    # Build the system
    if [ -e $MKFILE ] ; then
      echo -ne "Building the system...\n"
      cd $JHALFSDIR && make
      echo -ne "done\n"
    fi
  fi
}


#----------------------------#
clean_builddir() {
#----------------------------#
  # Test if the clean must be done.
  if [ "$CLEAN" = "1" ] ; then
    # Test to make sure we're running the clean as root
    if [ "$UID" != "0" ] ; then
      echo "You must be logged in as root to clean the build directory."
      exit 1
    fi
    # Test to make sure that the build directory was populated by jhalfs
    if [ ! -d $JHALFSDIR ] || [ ! -d $BUILDDIR/sources ] ; then
      echo "Looks like $BUILDDIR was not populated by a previous jhalfs run."
      exit 1
    else
      # Clean the build directory
      echo -ne "Cleaning $BUILDDIR...\n"
      rm -rf $BUILDDIR/{bin,boot,dev,etc,home,lib,media,mnt,opt,proc,root,sbin,srv,sys,tmp,tools,cross-tools,usr,var}
      echo -ne "Cleaning $JHALFSDIR...\n"
      rm -rf $JHALFSDIR/{0*,1*,envars,sources-dir,*commands,logs,Makefile,*.xsl,makefile-functions,packages,patches}
      echo -ne "Cleaning remainig extracted sources in $BUILDDIR/sources...\n"
      rm -rf `find $BUILDDIR/sources/* -maxdepth 0 -type d`
      echo -ne "done\n"
    fi
  fi
}

#----------------------------#
get_book() {
#----------------------------#
  cd $JHALFSDIR

  if [ -z $WC ] ; then
    # Check for Subversion instead of just letting the script hit 'svn' and fail.
    test `type -p svn` || eval "echo \"This feature requires Subversion.\"
    exit 1"
    echo -n "Downloading the $PROGNAME document, $LFSVRS version... "

    case $PROGNAME in
      lfs) svn_root="LFS" ;;
      hlfs) svn_root="HLFS" ;;
      clfs) svn_root="cross-lfs" ;;
      blfs) svn_root="BLFS" ;;
      *) echo "BOOK not defined in function <get_book>"
          exit 1 ;;
    esac
    # Grab a fresh book if it's missing, otherwise, update it from the
    # repo. If we've already extracted the commands, move on to getting the
    # sources.
    if [ -d ${PROGNAME}-$LFSVRS ] ; then
      cd ${PROGNAME}-$LFSVRS
      if LC_ALL=C svn up | grep -q At && test -d $JHALFSDIR/${PROGNAME}-commands && \
      test -f $JHALFSDIR/packages ; then
        echo -ne "done\n"
        # Set the canonical book version
        cd $JHALFSDIR
        VERSION=`grep "ENTITY version " $BOOK/general.ent | sed 's@<!ENTITY version "@@;s@">@@'`
        get_sources
      else
        echo -ne "done\n"
        # Set the canonical book version
        cd $JHALFSDIR
        VERSION=`grep "ENTITY version " $BOOK/general.ent | sed 's@<!ENTITY version "@@;s@">@@'`
        extract_commands
      fi
    else
      case $LFSVRS in
        development)
           svn co $SVN/${svn_root}/trunk/BOOK ${PROGNAME}-$LFSVRS >>$LOGDIR/$LOG 2>&1 ;;
      esac
      echo -ne "done\n"
      # Set the canonical book version
      cd $JHALFSDIR
      VERSION=`grep "ENTITY version " $BOOK/general.ent | sed 's@<!ENTITY version "@@;s@">@@'`
      extract_commands
    fi
  else
    echo -ne "Using $BOOK as book's sources ...\n"
    # Set the canonical book version
    cd $JHALFSDIR
    VERSION=`grep "ENTITY version " $BOOK/general.ent | sed 's@<!ENTITY version "@@;s@">@@'`
    extract_commands
  fi
}

#----------------------------#
extract_commands() {         #
#----------------------------#

  # Check for libxslt instead of just letting the script hit 'xsltproc' and fail.
  test `type -p xsltproc` || eval "echo \"This feature requires libxslt.\"
  exit 1"

  cd $JHALFSDIR
  VERSION=`grep "ENTITY version " $BOOK/general.ent | sed 's@<!ENTITY version "@@;s@">@@'`

  # Start clean
  if [ -d ${PROGNAME}-commands ]; then
    rm -rf ${PROGNAME}-commands
    mkdir -v ${PROGNAME}-commands
  fi
  echo -n "Extracting commands for"

  # Dump the commands in shell script form from the HLFS book.
  case ${PROGNAME} in
    clfs)
        echo -n " ${L_arrow}${BOLD}$ARCH${R_arrow} target architecture"
        xsltproc --nonet \
                 --xinclude \
                 --stringparam method $METHOD \
                 --stringparam testsuite $TEST \
                 --stringparam vim-lang $VIMLANG \
                 --stringparam timezone $TIMEZONE \
                 --stringparam page $PAGE \
                 --stringparam lang $LANG \
                 --stringparam keymap $KEYMAP \
                 -o ./${PROGNAME}-commands/ $XSL $BOOK/$ARCH-index.xml >>$LOGDIR/$LOG 2>&1
      ;;
    hlfs)
        echo -n " ${L_arrow}${BOLD}$MODEL${R_arrow} HLFS libc implementation"
        xsltproc --nonet \
                 --xinclude \
                 --stringparam model $MODEL \
                 --stringparam testsuite $TEST \
                 --stringparam timezone $TIMEZONE \
                 --stringparam page $PAGE \
                 --stringparam lang $LANG \
                 --stringparam lc_all $LC_ALL \
                 --stringparam keymap $KEYMAP \
                 --stringparam grsecurity_host $GRSECURITY_HOST \
                 -o ./${PROGNAME}-commands/ $XSL $BOOK/index.xml >>$LOGDIR/$LOG 2>&1
      ;;
    lfs)
        echo -n " ${L_arrow}${BOLD}LFS${R_arrow} build"
        xsltproc --nonet \
                 --xinclude \
                 --stringparam testsuite $TEST \
                 --stringparam vim-lang $VIMLANG \
                 --stringparam timezone $TIMEZONE \
                 --stringparam page $PAGE \
                 --stringparam lang $LANG \
                 -o ./${PROGNAME}-commands/ $XSL $BOOK/index.xml >>$LOGDIR/$LOG 2>&1
      ;;
    blfs)
        echo -n " ${L_arrow}${BOLD}BLFS${R_arrow} build"
        xsltproc --nonet \
                 --xinclude \
                 --stringparam testsuite $TEST \
                 --stringparam server $SERVER \
                 -o ./${PROGNAME}-commands/ $XSL $BOOK/index.xml >>$LOGDIR/$LOG 2>&1
      ;;
    *) exit 1 ;;
  esac

  echo " ...OK"

  # Make the scripts executable.
  chmod -R +x $JHALFSDIR/${PROGNAME}-commands

  # Create the packages file. We need it for proper Makefile creation
  rm -f packages
  case "${PROGNAME}" in
    clfs)
      echo -n "Creating <${PROGNAME}> specific packages file"
      grep "\-version " $BOOK/packages.ent | sed -e 's@<!ENTITY @@' \
                                                 -e 's@">@"@' \
                                                 -e '/generic/d' > packages
     echo " ...OK"
     ;;

    hlfs)
      echo -n "Creating <${PROGNAME}> specific packages file"
      grep "\-version" $BOOK/general.ent | sed -e 's@<!ENTITY @@' \
                                               -e 's@">@"@' \
                                               -e '/generic/d' >> packages
      echo " ...OK"
      ;;

    lfs)
      echo -n "Creating <${PROGNAME}> specific packages file"
      grep "\-version" $BOOK/general.ent | sed -e 's@<!ENTITY @@' \
                                               -e 's@">@"@' \
                                               -e '/generic/d' >> packages
      echo " ...OK"
      ;;
  esac

  # Done. Moving on...
  get_sources
}


#----------------------------#
get_sources() {              # Download file, write name to MISSING_FILES.DMP if an error
#----------------------------#
  local saveIFS=$IFS
  local IFS line URL1 URL2 FILE MD5 NOMD5

  # Test if the packages must be downloaded
  if [ "$GETPKG" = "1" ] ; then

    [[ ! -d $BUILDDIR/sources ]] && mkdir $BUILDDIR/sources
    cd $BUILDDIR/sources
    [[ -f MD5SUMS ]] && rm MD5SUMS
    [[ -f MD5SUMS-$VERSION ]] && rm MD5SUMS-$VERSION
    [[ -f MISSING_FILES.DMP ]] && rm MISSING_FILES.DMP
    [[ -f urls.lst ]] && rm urls.lst

    # Download a fresh MD5SUMS file
    wget $SERVER/pub/lfs/conglomeration/MD5SUMS

    # Generate URLs file
    create_urls

    IFS=$'\x0A'  # Modify the 'internal field separator' to break on 'LF' only
    for line in `cat urls.lst`; do
      IFS=$saveIFS  # Restore the system defaults

      # Skip some packages if they aren't needed
      case $line in
        */tcl* | */expect* | */dejagnu* | */tree* | */gcc-testsuite* )
            [[ "$TEST" = "0" ]] && continue
          ;;
        */vim-*-lang* )
            [[ "$VIMLANG" = "0" ]] && continue
          ;;
      esac

      URL1=`echo $line | cut -d" " -f1` # Upstream URL
      URL2=`echo $line | cut -d" " -f2` # Fallback URL
      FILE=`basename $URL2` # File name

      # If the file exists in the archive copy it to the $BUILDDIR/sources dir
      # MD5SUM is assumed to be correct from previous download
      if [ ! -z ${SRC_ARCHIVE} ] &&
         [ -d ${SRC_ARCHIVE} ] &&
         [ -f ${SRC_ARCHIVE}/$FILE ]; then
        cp ${SRC_ARCHIVE}/$FILE .
        echo "$FILE: -- copied from $SRC_ARCHIVE" && continue
      fi

      # Find the md5 sum for this package.
      set +e
      MD5=`grep "  $FILE" MD5SUMS`
      if [ $? -ne 0 ]; then
        set -e
        echo "${RED}$FILE not found in MD5SUMS${OFF}"
        echo "$FILE not found in MD5SUMS" >> MISSING_FILES.DMP
        NOMD5=1
      fi
      set -e

      if [ ! -f $FILE ] ; then
        wget $URL1 || wget $URL2 || (echo "${RED}$FILE not found on the servers${OFF}" &&
                                     echo "$FILE not found on the servers 1" >> MISSING_FILES.DMP )
      elif [[ "$NOMD5" != "1" ]] && ! echo "$MD5" | md5sum -c - ; then
        wget -N $URL1 || wget -N $URL2 || ( echo "${RED}$FILE not found on the servers${OFF}" &&
                                            echo "$FILE not found on the servers 2" >> MISSING_FILES.DMP )
      fi

      if [[ "$NOMD5" != "1" ]] && ! echo "$MD5" | md5sum -c - ; then
        echo "${RED}$FILE not match MD5SUMS value${OFF}"
        echo "$FILE not match MD5SUMS value" >> MISSING_FILES.DMP
      fi
      echo `grep "$MD5" MD5SUMS` >> MD5SUMS-$VERSION

      # Copy the freshly downloaded file
      # to the source archive.
      if [ ! -z ${SRC_ARCHIVE} ] &&
         [ -d ${SRC_ARCHIVE} ] &&
         [ -w ${SRC_ARCHIVE} ] &&
         [ ! -f ${SRC_ARCHIVE}/$FILE ] ; then
        echo "Store file:<$FILE> in package archive"
        cp -v $FILE ${SRC_ARCHIVE}
      fi

    done

    if [[ -s MISSING_FILES.DMP ]]; then
      echo  -e "\n\n${tab_}${RED} One or more files were not retrieved or have a bad MD5SUMS chechsum.\n${tab_} Check ${L_arrow}$BUILDDIR/sources/MISSING_FILES.DMP${R_arrow} for names ${OFF}\n\n"
    fi

  fi
}


#----------------------------#
create_urls() {              #
#----------------------------#
  cd $JHALFSDIR

  case ${PROGNAME} in
    clfs)
        echo -n "Creating CLFS <${ARCH}> specific URLs file"
        xsltproc --nonet --xinclude \
                 --stringparam server $SERVER \
                 -o $BUILDDIR/sources/urls.lst urls.xsl \
                 $BOOK/materials/$ARCH-chapter.xml >>$LOGDIR/$LOG 2>&1
        echo " ...OK"
      ;;
    hlfs)
        echo -n "Creating HLFS <${MODEL}> specific URLs file"
        xsltproc --nonet --xinclude \
                 --stringparam server $SERVER \
                 --stringparam model $MODEL \
                 -o $BUILDDIR/sources/urls.lst urls.xsl \
                 $BOOK/chapter04/chapter04.xml >>$LOGDIR/$LOG 2>&1
        echo " ...OK"
      ;;
    lfs)
        echo -n "Creating LFS specific URLs file"
        xsltproc --nonet --xinclude \
                 --stringparam server $SERVER \
                 -o ../sources/urls.lst urls.xsl \
                 $BOOK/chapter03/chapter03.xml >>$LOGDIR/$LOG 2>&1
        echo " ...OK"
      ;;
  esac

  cd $BUILDDIR/sources
}
